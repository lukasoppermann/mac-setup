#######################
#
# Utitlities ################
#
# show all processes running on port XYZ
function port {
	if [[ $1 != "" ]] ; then
		lsof -i :${1#.} | grep LISTEN
	else
		echo "Please provide a port"
	fi 
}
alias top="htop"
# better ls -G -A=include hidden, but not . and ..; -F=/ after dir to mark it as such
alias ls='ls -GAF ${colorflag}'
# list all files in long format
alias ll='ls -lAF ${colorflag}'
# list directories only
alias ld='ls -lF ${colorflag} | grep "^d"'
#######################
#
# Navigate ################
#
# repos / dir
alias repos="cd ~/repos"
alias repo="cd ~/repos"
alias github="cd ~/GitHub"
# open in vscode
alias vs="code -r ."
# better open
function open () {
  if [ -z "$1" ]; then
    command code -r .
  else
    /usr/bin/open $1
  fi
}
# better cd that moves to paretn dir of file
# smart cd function, allows switching to /etc when running 'cd /etc/fstab'
# also ls directory content when cd or when cd failed
function cd () {
	if (( ${#argv} == 1 )) && [[ ! -f ${1} ]] && [ ! -d ${1} ] && [ -d ${1:h} ]; then
		echo -e "Directory \e[94;1m${1}\e[0m does not exist, listing files & direcotires for \e[94;1m${1:h}\e[0m.\n"
		ls -a ${1:h}
	elif (( ${#argv} == 1 )) && [[ -f ${1} ]]; then
		[[ ! -e ${1:h} ]] && return 1
		print "Correcting \e[94;1m${1}\e[0m to \e[94;1m${1:h}\e[0m"
		builtin cd ${1:h} && ls -a
	else
		builtin cd "$@" && ls -a
	fi
}

#######################
#
# GIT ################
#
alias st="git status"
alias b="git branch"
alias ck="git checkout"
alias add="git add"
alias add.="git add ."
alias tags="git tag -l | sort -V" 
alias pull="git pull"
alias rebase="git rebase -i"
alias rb="git rebase"
alias rbc="git rebase --continue"
alias abort="git rebase --abort"
alias reset="git reset -p"
alias clone="git clone"
alias log="git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %C(Normal)%s%Creset %C(white)(%cr) %Creset' --abbrev-commit"
rbi() {
  git rebase -i HEAD~$1
}
cmn() {
  msg=${*:1}
	if [[ -z "$msg" ]]; then
		echo -n "Enter a commit message:"
		read message
		msg=$message
	fi
	git commit -nm "$msg"
}
# git checkout -m with required message
function cm {
	msg=${*:1}
	if [[ -z "$msg" ]]; then
		echo -n "Enter a commit message:"
		read message
		msg=$message
	fi
	git commit -m "$msg"
}
# git push with some additions
function push {
	current_branch=$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')
	if [[ ($1 == "-f" && ($2 == "tag" || $2 == "tags")) ]]; then
    git push -f --tags origin $current_branch
  elif [[ ($1 == "tag" || $1 == "tags") && $2 == "-f" ]]; then
    git push -f --tags origin $current_branch
  elif [[ $1 == "tags" || $1 == "tag"  || $1 == "--tags" ]]; then
    git push && git push --tags origin $current_branch
	elif [[ ! -z "$1" ]]; then
    git push $1
  else
    git push origin $current_branch
  fi
}
alias pfn="git push origin $(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/') --force --no-verify"
# delete branch
function : {
	if [[ ! -z "$1" ]]; then
    git push origin :$1
    if [[ ($2 == "-b") ]]; then
      git branch -D $1
    fi
  fi
}
# replace diff with diff so fancy
function diff {
	if [[ ! -z "$1" ]]; then
		git diff --color "$@" | diff-so-fancy 
	else
		git diff --color | diff-so-fancy
	fi
}
# replace diff with diff so fancy
function file-diff {
	if [[ ! -z "$1" ]]; then
		git diff --color --name-only "$@" | diff-so-fancy 
	else
		git diff --color --name-only | diff-so-fancy
	fi
}
alias fdiff="file-diff"
alias filediff="file-diff"
alias fileDiff="file-diff"
# git clean -f && git checkout -- ${dir}
function clean {
	default_dir="public"
	if [[ $1 == "" ]] ; then
		clean_dir=${default_dir}
	else
		clean_dir=${1}
	fi
	git clean -f
	git checkout -- ${clean_dir}
}
#######################
#
# NPM ################
#
function npm {
	var_npm="/usr/local/bin/npm"
	if [[ $1 == "update" ]] || [[ $1 == "up" ]] ; then
		$var_npm update
	elif [[ $1 == "outdated" ]] || [[ $1 == "out" ]] ; then
		$var_npm outdated -l
	elif [[ $1 == "" ]] ; then
		$var_npm run && $var_npm
	else
		/usr/local/bin/npm "$@"
	fi
}
#######################
#
# Real diff ################
#
dif () {
 /usr/bin/diff -u "$1" "$2" --ignore-blank-lines --ignore-space-change | diff-so-fancy
}